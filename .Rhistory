a <- 2*i-1
b <- 2*i
x0[,a] <- x[1:500,i]
x0[,b] <- x[501:1000,i]
}
x0
nrow(x0)
p_value_ln_99SNP <- rep.int(0,1000)
p_value_ln_AS_99SNP <- rep.int(0,1000)
chi_sta_ln_99SNP <- rep.int(0,1000)
chi_sta_ln_AS_99SNP <- rep.int(0,1000)
x0
library(mixIndependR)
library(beepr)
beep()
#############loop################
for (i in 1:1000){
m <- sample(1:100,99,replace = F)
index <- rep.int(0,198)
for (j in 1:99){
a <- 2*j-1
b <- 2*j
index[a] <- (2*m-1)[j]
index[b] <- (2*m)[j]
}
x <- x0[,index]
p <- AlleleFreq(x)
h <- Heterozygous(x)
H <- RxpHetero(h,p,HWE = F)
Obs_DistHetero<-FreqHetero(h)
Exp_DistHetero<-DistHetero(H)
prob<-Exp_DistHetero$Density
obs<-Obs_DistHetero$Frequency
idx <-which(prob==0)
if (length(idx)==0){
prob <- prob
obs <- obs
}else{
prob <- prob[-idx]
obs <- obs[-idx]
}
x20 <-chisq.test(obs,p=prob,simulate.p.value = T,B=100)
chi_sta_ln_99SNP[i]<-x20$statistic
s<-Simulate_DistK(H,500,100)
x2<-Dist_SimuChisq(s,Exp_DistHetero$Density,100)
P <- ecdf(x2)
p_value_ln_99SNP[i]<-P(x20$statistic)
print(i)
}
beep(3)
########plot#############
dt <- data.frame(x=c(1:1000),y=1-p_value_ln_99SNP)
library(ggplot2)
length(which(dt$y<0.05))/1000
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")+
#geom_text(x=0.8,y=3,label="mean=0.82")
xlim(0,1)
########plot#############
dt <- data.frame(x=c(1:1000),y=1-p_value_ln_99SNP)
########plot#############
dt <- data.frame(x=c(1:1000),y=1-p_value_ln_99SNP)
length(which(dt$y<0.05))/1000
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")+
#geom_text(x=0.8,y=3,label="mean=0.82")
xlim(0,1)
length(which(dt$y<0.05))/1000
length(which(p_value_ln_99SNP>0.95))
dt
p_value_ln_99SNP
plot(p_value_ln_99SNP)
########plot#############
dt <- data.frame(x=c(1:1000),y=1-p_value_ln_99SNP)
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")+
#geom_text(x=0.8,y=3,label="mean=0.82")
xlim(0,1)
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")+
#geom_text(x=0.8,y=3,label="mean=0.82")
#xlim(0,1)
mean(dt$y)
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")+
#geom_text(x=0.8,y=3,label="mean=0.82")
#xlim(0,1)
mean(dt$y)
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.18,y=1.2,label="Pr(<0.05)=1")
ggplot(data=dt,aes(y))+
geom_density(fill="red",alpha=0.5)+
geom_vline(xintercept = 0.05)+
#geom_vline(xintercept = mean(dt$y))+
xlab("p value")+
ggtitle("p value of K for 99 Random Linked SNPs")+
geom_text(x=0.045,y=1.2,label="Pr(<0.05)=1")
write.csv(p_value_ln_99SNP,file = "/Users/ice4prince/Desktop/academy/MutualIndependence/Results/pvalue_K_99SNP_link.csv")
library(mixIndependR)
library(beepr)
ks.test(df$p2,alternative = "two.sided")
df <- data.frame(p2=pvalue_K_2SNPS_unlink$x,p3=pvalue_K_3SNPS_unlink$x)
qqplot(df$p2,df$p3,xlab = "Pvalues for 2 unlink SNPs",ylab="Pvalues for 3 unlink SNPs",main="Q-Q plot for Unlinked SNPs 2 vs 3")
library(readr)
pvalue_K_99SNP_link <- read_csv("Dropbox/share/Results/pvalue_K_99SNP_link.csv")
View(pvalue_K_99SNP_link)
pvalue_K_99SNP_link
ks.test(pvalue_K_99SNP_link$x)
?ks.test
ks.test(pvalue_K_99SNP_link$x,punif(pvalue_K_99SNP_link$x))
p_value_ul_large
p_value_ul_99SNP
library(devtools)
library(usethis)
library(devtools)
library(roxygen2)
install.packages("devtools")
install.packages(c("dplyr", "ggplot2", "knitr", "MASS", "nlme", "nnet", "rlang", "rmarkdown", "rstudioapi"))
install.packages(c("BH", "boot", "callr", "cli", "covr", "digest", "DT", "fansi", "farver", "foreign", "fs", "gh", "hms", "jsonlite", "KernSmooth", "lattice", "lifecycle", "Matrix", "mgcv", "mime", "pillar", "plyr", "prettyunits", "processx", "ps", "stringi", "survival", "testthat", "tidyselect", "tinytex", "uuid", "vctrs", "xfun", "xlsx", "yaml"))
install.packages("mixIndependR")
install.packages("mixIndependR")
x0 <- SNP_500x100_Link
SNP_500x100_Link <- read.csv("~/Dropbox/share/input/SNP_500x100_Link.csv", row.names=1)
View(SNP_500x100_Link)
x0 <- SNP_500x100_Link
####Use Function for Full-Linked####
?Prop_Pvalue
library(mixIndependR)
####Use Function for Full-Linked####
?Prop_Pvalue
pr <- rep.int(0,5)
df_flln <- data.frame(No.of.SNPs=c(6:10),Ppro = pr)
x0 <- data.frame(STR1=c(12,13,13,14,15,13,14,12,14,15),
STR1_1=c(12,14,13,15,13,14,13,12,14,15),
SNP1=c("A","T","A","A","T","A","A","T","T","A"),
SNP1_1=c("A","T","T","T","A","T","A","A","T","T"),
STR2=c(10,12,11,9,10,12,11,12,12,10),
STR2_1=c(10,9,11,11,10,12,10,10,12,9),
SNP2=c("C","C","G","G","G","G","C","G","G","C"),
SNP2_1=c("C","C","G","G","C","G","C","C","G","G"))
Prop_Pvalue(x0,3,10,10,m=2,Part = TRUE,alpha = 0.05)
df_flln <- data.frame(No.of.SNPs=c(6:10),PproK = pr,PproX =pr)
df_flln
x0<-SNP_500x100_link
for (i in 6:10){
df_flln$PproK[i-5] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_K
df_flln$PproX[i-5] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_X
}
x0
SNP_500x100_Link <- read.csv("~/Dropbox/share/input/SNP_500x100_Link.csv", row.names=1)
View(SNP_500x100_Link)
x0<-SNP_500x100_link
x0
SNP_500x100_Link
View(SNP_500x100_Link)
View(SNP_500x100_link)
View(SNP_500x100_link)
View(SNP_500x100_Link)
rm(SNP_500x100_link)
SNP_500x100_link
View(SNP_500x100_Link)
SNP_500x100_Link
x0<-SNP_500x100_Link
x0
df_flln <- data.frame(No.of.SNPs=c(6:10),PproK = pr,PproX =pr)
pr <- rep.int(0,5)
df_flln <- data.frame(No.of.SNPs=c(6:10),PproK = pr,PproX =pr)
for (i in 6:10){
df_flln$PproK[i-5] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_K
df_flln$PproX[i-5] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_X
}
df_flln
for (i in 2:5){
df_flln_2to5$PproK[i-1] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_K
df_flln_2to5$PproX[i-1] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_X
}
df_flln_2to5 <- data.frame(No.of.SNPs=c(2:5),PproK = rep(0,4),PproX =rep(0,4)) ###haven't run yet####
for (i in 2:5){
df_flln_2to5$PproK[i-1] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_K
df_flln_2to5$PproX[i-1] <- Prop_Pvalue(x0,1000,100,100,m=i,Part = T,alpha = 0.05)$Pr_X
}
df_flln_2to5
install.packages("tidyverse")
Partial.Linkage.Design <- read.csv("~/Desktop/academy/HPC/Partial Linkage Design.csv")
View(Partial.Linkage.Design)
STR_500x100_unlink_Diploid <- read.csv("~/Desktop/academy/HPC/STR_500x100_unlink_Diploid.csv")
View(STR_500x100_unlink_Diploid)
STR_500x100_link_Diploid <- read.csv("~/Desktop/academy/HPC/STR_500x100_link_Diploid.csv")
View(STR_500x100_link_Diploid)
SNPGenotype_500x100_Link <- read.csv("~/Desktop/academy/HPC/SNPGenotype_500x100_Link.csv")
View(SNPGenotype_500x100_Link)
SNPGenotype_500x100_Unlink <- read.csv("~/Desktop/academy/HPC/SNPGenotype_500x100_Unlink.csv")
View(SNPGenotype_500x100_Unlink)
###the problem of 0!!!!Needs to solve###
library(tidyverse)
###the problem of 0!!!!Needs to solve###
library(dplyr)
library(mixIndependR)
mixPanelDesign <- read.csv("~/Desktop/academy/HPC/mixPanelDesign.csv", row.names=1)
View(mixPanelDesign)
Nset <- mixPanelDesign
Nset
SNP_ln <- SNP_500x100_Link
SNP_ul <- SNP_500x100_unlink
SNP_ul <- SNPGenotype_500x100_Unlink
SNP_ln <- SNPGenotype_500x100_Link
SNP_ln
STR_ln <- STR_500x100_link_Diploid
STR_ul <- STR_500x100_unlink_Diploid
STR_ul$X <- SNP_ul$X
STR_ul$X
SNP_ln$ID
STR_ln$X
STR_ln$X <-SNP_ln$ID
MixPanel <-function(x,S1,S2,S3,S4){
Index1<-sample(1:100,x[2],replace = F)
Index2<-sample(1:100,x[3],replace = F)
Index3<-sample(1:100,x[4],replace = F)
Index4<-sample(1:100,x[5],replace = F)
S1 %>% select(c(1,as.vector(t(cbind(2*Index1,2*Index1+1))))) ->s1
S2 %>% select(c(1,as.vector(t(cbind(2*Index2,2*Index2+1))))) ->s2
S3 %>% select(c(1,as.vector(t(cbind(2*Index3,2*Index3+1))))) ->s3
S4 %>% select(c(1,as.vector(t(cbind(2*Index4,2*Index4+1))))) ->s4
Ln <- merge(s1,s2)
Ul <- merge(s3,s4)
return(merge(Ln,Ul))
}
SNP_ln <-
SNP_ul <-
?read.csv
?read.csv
STR_ln
SNP_ln
SNP_ln
SNP_ln <- SNPGenotype_500x100_Link
SNP_ln
STR_ul[1] <-SNP_ul$ID
STR_ul[[1]] <-SNP_ul$ID
STR_ul$X <-SNP_ul$ID
STR_ln[1] <-SNP_ln$ID
SNP_ul <- SNPGenotype_500x100_Unlink
STR_ul[1] <-SNP_ul$ID
STR_ln
names(STR_ln)
names(STR_ln)[1]
names(STR_ln)[1] <- "ID"
STR_ln[1]
names(STR_ul)[1] <- "ID"
STR_500x100_link_Diploid
STR_500x100_unlink_Diploid <- read.csv("~/Desktop/academy/HPC/STR_500x100_unlink_Diploid.csv")
View(STR_500x100_unlink_Diploid)
STR_ln <- STR_500x100_link_Diploid
STR_500x100_unlink_Diploid <- read.csv("~/Desktop/academy/HPC/STR_500x100_unlink_Diploid.csv")
View(STR_500x100_unlink_Diploid)
STR_ul <- STR_500x100_unlink_Diploid
mixIndependK<-function(x,s,t,B){
p <- AlleleFreq(x)
h <- Heterozygous(x)
H <- RxpHetero(h,p,HWE = F)
Obs_DistHetero<-FreqHetero(h)
Exp_DistHetero<-DistHetero(H)
prob<-Exp_DistHetero$Density
obs<-Obs_DistHetero$Frequency
idx <-which(prob==0)
if (length(idx)==0){
prob <- prob
obs <- obs
}else{
prob <- prob[-idx]
obs <- obs[-idx]
}
x20 <-chisq.test(obs,p=prob,simulate.p.value = T,B=B)
s<-Simulate_DistK(H,s,t)
x2<-Dist_SimuChisq(s,Exp_DistHetero$Density,B)
P <- ecdf(x2)
return(P(x20$statistic))
}
mixIndependX <- function(x,s,t,B){
AS <- AlleleShare_Table(x,replicate = F)
Obs_DistAlleleShare<-FreqAlleleShare(AS)
e <- RealProAlleleShare(AS)
Exp_DistAlleleShare <- DistAlleleShare(e)
prob<-Exp_DistAlleleShare$Density
obs<-Obs_DistAlleleShare$Frequency
idx <-which(prob==0)
if (length(idx)==0){
prob <- prob
obs <- obs
}else{
prob <- prob[-idx]
obs <- obs[-idx]
}
x20 <-chisq.test(obs,p=prob,simulate.p.value = T,B=B)
s<-Simulate_DistX(e,s,t)
x2<-Dist_SimuChisq(s,Exp_DistAlleleShare$Density,B)
P <- ecdf(x2)
return(P(x20$statistic))
}
library(dplyr)
library(beepr)
mixPanelDesign <- read.csv("~/Desktop/academy/HPC/mixPanelDesign.csv")
View(mixPanelDesign)
Nset
Partial.Linkage.Design <- read.csv("~/Desktop/academy/HPC/Partial Linkage Design.csv")
View(Partial.Linkage.Design)
#####Loops run######
for (j in 1:10){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 7:18){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
beep()
}
beep(3)
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
MixPanel
Nset
Nset[1]
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
MixPanel(Nset,SNP_ln,STR_ln,SNP_ul,STR_ul)
MixPanel(Nset[1],SNP_ln,STR_ln,SNP_ul,STR_ul)
MixPanel(Nset[1],SNP_ln,STR_ln,SNP_ul,STR_ul)
typeof(Nset)
Nset<-data.frame(Nset)
MixPanel(Nset[1],SNP_ln,STR_ln,SNP_ul,STR_ul)
Nset[1]
Nset[[1]]
Index1<-sample(1:100,Nset[[1]][2],replace = F)
Index2<-sample(1:100,Nset[[1]][3],replace = F)
Index3<-sample(1:100,Nset[[1]][4],replace = F)
Index4<-sample(1:100,Nset[[1]][5],replace = F)
S1 %>% select(c(1,as.vector(t(cbind(2*Index1,2*Index1+1))))) ->s1
SNP_ln %>% select(c(1,as.vector(t(cbind(2*Index1,2*Index1+1))))) ->s1
STR_ln %>% select(c(1,as.vector(t(cbind(2*Index2,2*Index2+1))))) ->s2
SNP_ul %>% select(c(1,as.vector(t(cbind(2*Index3,2*Index3+1))))) ->s3
SNP_ul
SNP_ln
SNP_500x100_Link <- read.csv("~/Desktop/academy/HPC/SNP_500x100_Link.csv")
View(SNP_500x100_Link)
SNP_500x100_unlink <- read.csv("~/Desktop/academy/HPC/SNP_500x100_unlink.csv")
View(SNP_500x100_unlink)
SNP_ln <- read.csv("~/Desktop/academy/HPC/SNP_500x100_Link.csv")
SNP_ul <- read.csv("~/Desktop/academy/HPC/SNP_500x100_unlink.csv")
#####Loops run######
for (j in 1:10){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 7:18){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
beep()
}
beep(3)
Panels_mix
counta(c(0,1,3,4,4,2),0)
counta(c(0,1,3,4,4,2),5)
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
Panels_mix
Nset
lapply(Nset,mean)
Nset$X1
MixPanel(Nset[1],SNP_ln,STR_ln,SNP_ul,STR_ul)
Q
MixPanel(Nset[[1]],SNP_ln,STR_ln,SNP_ul,STR_ul)
SNP_ln
STR_ln
#####Loops run######
K <- mat.or.vec(129,1000)
X <- mat.or.vec(129,1000)
SNP_ln
SNP_ln[1]
SNP_500x100_Link <- read.csv("~/Desktop/academy/HPC/SNP_500x100_Link.csv")
View(SNP_500x100_Link)
SNP_ln <- SNP_500x100_Link
for (j in 1:10){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 7:18){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
beep()
}
for (j in 1:10){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 124:129){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
beep()
}
MixPanel
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
SNP_ln
STR_ln
STR_500x100_link_Diploid <- read.csv("~/Desktop/academy/HPC/STR_500x100_link_Diploid.csv")
View(STR_500x100_link_Diploid)
STR_ln <- STR_500x100_link_Diploid
STR_ln
SNP_ul
STR_ul
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
Panels_mix
for (j in 1:10){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 124:129){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
beep()
}
Nset <- read.csv("~/mixSimulation_202009/mixPanelDesign.csv",row.names = 1)
for (j in 1:2){
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
for (i in 37:60){
x <- Panels_mix[[i]][-1]
K[i,j]<-mixIndependK(x,500,100,100)
X[i,j]<-mixIndependX(x,250,100,100)
print(paste(i,"case",j,"-th run"))
}
print(paste(j,"-th run complete!"))
}
Q
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
Panels_mix[37][-1]
Panels_mix[[27]][-1]
Panels_mix[[37]][-1]
Panels_mix[[38]][-1]
Panels_mix[[39]][-1]
Panels_mix[[39]]
head(Panels_mix[[39]][,-1])
for (i in 37:60){
x <- Panels_mix[[i]][,-1]
K[i,j]<-mixIndependK(x,50,10,10)
X[i,j]<-mixIndependX(x,25,10,10)
print(paste(i,"case",j,"-th run"))
}
j <- 1
Panels_mix[[48]]
Panels_mix[[47]]
Panels_mix[[49]]
Panels_mix[[49]]
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
Panels_mix[[49]]
####Debug#########
lapply(Nset, MixPanel,S1=SNP_ln,S2=STR_ln,S3=SNP_ul,S4=STR_ul) -> Panels_mix
Panels_mix[[49]]
x <- Panels_mix[[37]][,-1]
x
head(x)
library(mixIndependR)
?Prop_Pvalue
?counta
?Prop_Pvalue
setwd("~/Dropbox/share/R/mixIndependR") ###mac####
